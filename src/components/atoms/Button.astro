---
import { t } from "i18next";

export interface Props {
	href: URL | string,
	target?: '_self' | '_blank' | '_parent' | '_top',
	type?: string | string[],
	icon?: string,
	titleKey?: string,
	textKey?: string,
	text?: string,
}

const {
	href,
	target = '_self',
	type,
	icon,
	titleKey,
	textKey,
	text,
} = Astro.props as Props;

var buttonClasses = ["button"];
if (typeof type === "string") {
	buttonClasses.push(`is-${type}`)
} else {
	buttonClasses = buttonClasses.concat(type.map(s => `is-${s}`))
}

let final_text;

if (textKey) {
	// prioritize text key
	const translated = t(textKey);
	if (translated !== textKey) {
		// if it's successfully translated, return
		final_text = translated;
	}
} else {
	// fallback to text if any
	final_text = text ? text : null;
}
---

<a {titleKey && t(titleKey)} {href} {target} class:list={buttonClasses}>
	<span class="icon">
		<i class={icon}></i>
	</span>
	{final_text && <span> {final_text} </span>}
</a>
---
import i18next, { t } from "i18next";
import Message from "./Message.astro";

const langs = [...i18next.languages].sort();
---

<div class="modal" id="language-modal">
	<label
		for="language-switcher"
		class="modal-background"
		id="language-modal-background"></label>

	<div class="modal-content">
		<div class="m-5">
			<section class="box p-3">
				<noscript>
					<textarea readonly class="input is-danger has-text-danger"
						>{t("prompt-error-noscript")}
					</textarea>
				</noscript>
				<div class="control has-icons-left my-2">
					<input
						id="lang-input"
						class="input"
						type="text"
						placeholder={t("prompt-search-language")}
					/>
					<span class="icon is-small is-left">
						<i class="fas fa-search"></i>
					</span>
				</div>
				<div id="jump-links" class="columns is-multiline m-2">
					{
						langs.map((language) => {
							const nativeName = i18next.getResource(
								language,
								"common",
								"lang-name"
							);
							return (
								<div class="column is-one-third">
									<a
										class="lang-jump-link"
										href={Astro.url.pathname.replace(
											i18next.language,
											language
										)}
										data-lang-code={language}
										data-native-name={nativeName}
									>
										{nativeName}
									</a>
								</div>
							);
						})
					}
				</div>
			</section>

			<div class="is-flex is-flex-direction-row mt-3">
				<label
					class="button is-primary"
					id="language-modal-close-button"
					aria-label="close"
					for="language-switcher"
				>
					<span class="icon"><i class="fas fa-x"></i></span>
					<span>{t("button-close")}</span>
				</label>
			</div>
		</div>
	</div>

	<script is:inline>
		const langInput = document.getElementById("lang-input");
		const jumpLinks = document.getElementById("jump-links");
		var latest = "";
		var latestTimeout = null;

		function update() {
			jumpLinks.querySelectorAll(".lang-jump-link").forEach((e) => {
				e.style.display = "inherit";
			});

			if (latest.length > 0) {
				// if we have a filter
				const unmatched = jumpLinks.querySelectorAll(
					".lang-jump-link" +
						`:not([data-lang-code|="${latest}"])` +
						`:not([data-native-name^="${latest}" i])` +
						`:not([data-native-name$="${latest}" i])`
				);
				unmatched.forEach((e) => {
					e.style.display = "none";
				});
			}
		}

		langInput.oninput = (ev) => {
			latest = ev.target.value;
			latestTimeout = setTimeout(update, 500);
		};
		langInput.onchange = (ev) => {
			latest = ev.target.value;
			clearTimeout(latestTimeout);
			update();
		};
	</script>
</div>

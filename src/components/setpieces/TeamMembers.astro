---
import TeamMember from '@parts/team/TeamMember.astro';
import teamData from '@data/Team';
import teamInfo from "cache/teamInfo.json";

export interface Props {
	list: string[] | undefined;
	fromTeam: string | undefined;
}

let { list, leaderList, fromTeam } = Astro.props as Props;

if (leaderList === undefined) {
	leaderList = [];
}

if (fromTeam !== undefined) {
	if (!teamInfo.hasOwnProperty(fromTeam)) {
		throw new Error(`Team ${fromTeam} does not exist`);
	}

	list = teamInfo[fromTeam]
		.map(function (github) {
			const member = Object.keys(teamData).find(member => teamData[member].github === github);

			if (member === undefined) {
				console.warn(`Member with github ${github} does not exist`);
				return "_NotFound_";
			}

			return member;
		});

	const leaderTeam = fromTeam + "-leaders";
	if (teamInfo.hasOwnProperty(leaderTeam)) {
		leaderList = teamInfo[leaderTeam]
	}
}
---

{list.map((name) =>
	<TeamMember member={teamData[name]} isLeader={leaderList.includes(teamData[name].github)} />
)}

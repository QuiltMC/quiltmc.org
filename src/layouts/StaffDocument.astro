---
import i18next, { t } from "i18next";
import Base from "./Base.astro"
import { localizeList, localizePath } from "@util/Util";

export interface Props {
	title: string,
	authors?: string[],
}

const { content } = Astro.props;
const { title, authors = [] } = content as Props;

let pageUrl = Astro.url.pathname;
if (pageUrl.endsWith("/")) {
	pageUrl = pageUrl.slice(0, -1);
}
const staffUrl = `/${i18next.language}/staff`;

function getLayer(url: string): number {
	return url.slice(staffUrl.length).split('/').length - 1
}

// read: get every subpage under /staff/, excluding the main staff page, sorted by filename
const pages = (await Astro.glob("/src/pages/**/staff/**"))
	.filter(page => page.url != staffUrl && page.url?.startsWith(staffUrl))
	.sort((a, b) => a.file.localeCompare(b.file));

const pageLayer = getLayer(pageUrl);

var documentPages = [];
// there should be no documents under the main page.
if (pageUrl != staffUrl) {
	// if we're in a team page or a document page, the document pages are the pages that:
	// - are under the current page
	// - not the same page, unless the current page is a document page or lower.

	// TL;DR: 
	// main staff page - no documents
	// team page - all pages under it, excluding itself
	// document pages & below - all pages, including itself.
	documentPages = pages.filter(p =>
		(p.url).includes(pageUrl) &&
		(pageLayer >= 2 || p.url !== pageUrl)
	);
}
---

<Base {content}>
<div class="columns is-centered">
	<div class="column is-10">
		<section class="section">
			<div class="columns">
				<div class="column is-narrow">
					<div class="is-hidden-tablet">
						<button class="button is-primary">
							<span class="icon"><i class="fas fa-ellipsis-h"></i></span>
							<span>{t("sidebar-pages")}</span>
						</button>
						<br />
						<br />
					</div>

					<div class="box is-hidden-mobile is-sticky">
						<aside class="menu">
							<p class="menu-label">{t("sidebar-resources")}</p>

							<ul class="menu-list">
								<a href={localizePath("/staff")} class={localizePath("/staff")==pageUrl ? "is-active" : "" }>
									Staff Resources
								</a>
							</ul>
							<p class="menu-label">{t("sidebar-teams")}</p>

							<ul class="menu-list">
								{pages.map(p => {
								const layer = p.url.slice(staffUrl.length).split("/").length - 1;
								const isSubpage = pageUrl.startsWith(p.url);
								const isCurrent = pageUrl == p.url;

								// Do not render if this page is not at the first layer (team level).
								if (layer !== 1) return;

								// If the current page is the first layer (team level), then highlight if we are at the corresponding
								// If it is deeper than that, highlight every page that is our "superpage".
								// For example, if we're in Moderation Team > Moderation, we should highlight Moderation Team too.
								const isActive = pageLayer === 1 ? isCurrent : isSubpage;

								return <li>
									<a href={ p.url } class={isActive ? "is-active" : "" }>{p.frontmatter.title}</a>
								</li>;
								})}

								{ documentPages.length > 0 && (

								<p class="menu-label">{t("sidebar-pages")}</p>

								<ul class="menu-list">
									{documentPages.map(p => <li>
										<a href={ p.url } class={pageUrl===(p.url ) ? "is-active" : "" }>{p.frontmatter.title}</a>
									</li>)}
								</ul>

								)}
							</ul>
						</aside>
					</div>
				</div>

				<div class="content column">
					<div class="media mb-5">
						<div class="media-content">
							<h1 class="title">
								{title}
							</h1>
							{ authors.length > 0 &&
							<p class="subtitle is-6">
								{t("page-authors", {
								count: authors.length,
								names: localizeList(authors)
								})}
							</p>
							}
							<p class="subtitle is-6">
								<!-- Edited: {% edit_date format-date %} -->
							</p>

						</div>
					</div>

					<slot />
					<!-- {% include third-party/anchor_headings.html html=content anchorClass="is-anchor ml-2" anchorBody="<i
							class='fas fa-sm fa-link-simple'></i>" %} -->
				</div>
			</div>
		</section>
	</div>
</div>
</Base>
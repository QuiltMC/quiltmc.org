---
import Page from "./Page.astro";

const props = Astro.props;
---
<Page content={props.content} frontmatter={props.frontmatter}>
    <noscript>
        <article class="message is-danger">
            <div class="message-body">
                <p>Javascript is required to view this page</p>
            </div>
        </article>
    </noscript>

    <p>
        By filling the fields below, you can generate a version of the <a href="https://github.com/quiltmc/quilt-template-mod">template mod</a> that is tailored to your project.
        Fields with an asterisk (*) are required.
    </p>

    <div class="field">
        <label id="version-label" class="label">Minecraft version:* (loading)</label>
        <div class="is-flex is-flex-direction-row">
            <div class="select">
                <select id="version-select">
                </select>
            </div>
            <div class="field pl-2">
                <p class="control has-icons-left">
                    <input id="version-search" class="input" placeholder="Search" />
                    <span class="icon is-small is-left">
                        <i class="fas fa-magnifying-glass"></i>
                    </span>
                </p>
            </div>
        </div>
    </div>

    <article id="unavailability-warning" class="message is-danger is-hidden">
        <div class="message-body">
            <p><strong>Error:</strong> Quilt Mappings and/or Quilted Fabric API is currently unavailable for this version.</p>
        </div>
    </article>

    <div class="field">
        <label class="label">Mod name:*</label>
        <div class="control">
            <input id="mod-name-input" class="input" type="text" placeholder="Example Mod">
        </div>
        <p class="help">Human readable name, must only contain alphanumerical characters and spaces.</p>
    </div>

    <article id="mod-name-warning" class="message is-danger is-hidden">
        <div class="message-body">
            <p><strong>Error:</strong> Mod name must only contain alphanumerical characters and spaces.</p>
        </div>
    </article>

    <div class="field">
        <label class="label">Mod ID:*</label>
        <div class="control">
            <input id="mod-id-input" class="input" type="text" placeholder="mod_id" maxlength="64">
        </div>
        <p class="help">Internal ID of the mod, must only contain alphanumerical characters, underscores and dashes (not recommended).</p>
    </div>

    <article id="mod-id-warning" class="message is-danger is-hidden">
        <div class="message-body">
            <p><strong>Error:</strong> Mod ID must only contain alphanumerical characters, underscores and dashes.</p>
        </div>
    </article>

    <div class="field">
        <label class="label">Mod description:</label>
        <div class="control">
            <input id="mod-description-input" class="input" type="text" placeholder="This really cool mod just serves as an example!">
        </div>
        <p class="help">Short description of the mod, used by tools such as Mod Menu.</p>
    </div>

    <div class="field">
        <label class="label">Mod author:</label>
        <div class="control">
            <input id="mod-author-input" class="input" type="text" placeholder="Jackpot">
        </div>
        <p class="help">Author of the mod, used by tools such as Mod Menu and in the license file.</p>
    </div>

    <div class="field">
        <label class="label">Java namespace:*</label>
        <div class="tabs is-toggle mb-4">
            <ul class="mt-0">
                <li id="tab-domain" class="is-active"><a>I have my own domain</a></li>
                <li id="tab-github"><a>I am a GitHub user</a></li>
                <li id="tab-provide"><a>I have neither of those</a></li>
            </ul>
        </div>

        <div id="container-domain" class="control">
            <input id="input-domain" class="input" type="text" placeholder="Domain name">
        </div>
        <div id="container-github" class="field has-addons is-hidden">
            <div class="control is-expanded">
                <input id="input-github" class="input" type="text" placeholder="Your handle">
            </div>
            <p class="control">
                <a class="button" disabled>
                    .github.io
                </a>
            </p>
        </div>
        <div id="container-provide" class="field has-addons is-hidden">
            <div class="control is-expanded">
                <input id="input-provide" class="input" type="text" placeholder="Your handle">
            </div>
            <p class="control">
                <a class="button" disabled>
                    .quiltusers.dev
                </a>
            </p>
        </div>
    </div>

    <article id="domain-warning" class="message is-danger is-hidden">
        <div class="message-body">
            <p><strong>Error:</strong> The specified domain does not appear to be valid.</p>
        </div>
    </article>

    <article id="github-warning" class="message is-danger is-hidden">
        <div class="message-body">
            <p><strong>Error:</strong> The specified GitHub username does not appear to be valid.</p>
        </div>
    </article>

    <article id="provide-warning" class="message is-danger is-hidden">
        <div class="message-body">
            <p><strong>Error:</strong> The handle must only contain lowercase letters.</p>
        </div>
    </article>

    <div class="field">
        <label class="label">License:*</label>
        <div class="control is-flex is-flex-direction-column">
            <label class="radio">
                <input type="radio" name="license"/>
                <strong>MIT</strong> - A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.
            </label>
            <label class="radio ml-0 mt-2">
                <input type="radio" name="license"/>
                <strong>Mozilla Public License 2.0</strong> - A copyleft license that requires making available source code of licensed files and modifications of those files under the same license.
            </label>
            <label class="radio ml-0 mt-2" >
                <input type="radio" name="license"/>
                <strong>The Unlicense</strong> - A public domain dedication with a fallback license that disclaims copyright.
            </label>
            <label class="radio ml-0 mt-2" >
                <input type="radio" name="license"/>
                <strong>Polyform Shield</strong>** - A license that allow any usage of the source code, except for any mod that may compete with the original mod.
            </label>
            <label class="radio ml-0 mt-2" >
                <input type="radio" name="license"/>
                <strong>None (All Rights Reserved)</strong>** - No license is provided, all rights are reserved. You may add your own license after downloading the template.
            </label>
        </div>
        <p class="help">**: Contributor License Agreement strongly recommended.<br/>The above descriptions are solely small summaries and do not represent legal advice. Please consult a law professional.</p>
    </div>

    <div class="is-flex is-justify-content-center">
        <button id="button-generate" class="button is-large is-responsive mt-4">
            GENERATE !
        </button>
    </div>
</Page>

<script>
    import { toast } from "bulma-toast";
    import JSZip from "jszip";
    import FileSave from "file-saver";

    const COPY_AS_IS = [
        "gradle/wrapper/gradle-wrapper.jar",
        "gradle/wrapper/gradle-wrapper.properties",
        ".editorconfig",
        ".gitattributes",
        ".gitignore",
        "gradlew",
        "gradlew.bat",
        "settings.gradle",
    ]

    const gib = document.getElementById.bind(document);

    if (window.location.pathname.startsWith("/en/usage/generator")) {
        let latestVersionComponents;
        let gameVersions;

        const errors = {}

        await Promise.all([
            await fetch("https://meta.quiltmc.org/v3/versions/game")
                .then(res => res.json())
                .then(data => {
                    gameVersions = data;
                }),

            await fetch("/api/v1/latest-version-components")
                .then(res => res.json())
                .then(data => {
                    latestVersionComponents = data;
                })
        ]);

        gib("version-select").innerHTML = gameVersions.map(version => `<option value="${version.version}">${version.version}</option>`).join("");
        gib("version-label").textContent = "Minecraft version:*";

        gib("version-select").addEventListener("change", e => {
            const components = latestVersionComponents[e.target.value];

            gib("unavailability-warning").classList.toggle("is-hidden", components.quilt_mappings && components.quilted_fabric_api);
            errors.quilt_mappings = !components.quilt_mappings;
            errors.quilted_fabric_api = !components.quilted_fabric_api;
        });

        for (const version of gameVersions) {
            if (version.stable) {
                gib("version-select").value = version.version;
                gib("version-select").dispatchEvent(new Event("change"));
                break;
            }
        }

        let namespaceType = "domain";

        function switchTab(tab)  {
            namespaceType = tab;
            gib("tab-domain").classList.toggle("is-active", tab === "domain");
            gib("tab-github").classList.toggle("is-active", tab === "github");
            gib("tab-provide").classList.toggle("is-active", tab === "provide");

            gib("container-domain").classList.toggle("is-hidden", tab !== "domain");
            gib("container-github").classList.toggle("is-hidden", tab !== "github");
            gib("container-provide").classList.toggle("is-hidden", tab !== "provide");

            errors.namespace = false;
            gib("domain-warning").classList.add("is-hidden");
            gib("github-warning").classList.add("is-hidden");
            gib("provide-warning").classList.add("is-hidden");
        }

        gib("tab-domain").addEventListener("click", () => switchTab("domain"));
        gib("tab-github").addEventListener("click", () => switchTab("github"));
        gib("tab-provide").addEventListener("click", () => switchTab("provide"));

        gib("input-domain").addEventListener("input", e => {
            errors.namespace = !e.target.value.match(/^[a-z0-9]+(\.[a-z0-9]+)*$/);
            gib("domain-warning").classList.toggle("is-hidden", !errors.namespace);
        });

        gib("input-github").addEventListener("input", e => {
            errors.namespace = !e.target.value.match(/^[a-z\d](?:[a-z\d]|-(?=[a-z\d])){0,38}$/i);
            gib("github-warning").classList.toggle("is-hidden", !errors.namespace);
        });

        gib("input-provide").addEventListener("input", e => {
            errors.namespace = !e.target.value.match(/^[a-z]+$/);
            gib("provide-warning").classList.toggle("is-hidden", !errors.namespace);
        });

        gib("mod-name-input").addEventListener("input", e => {
            errors.mod_name = !e.target.value.match(/^[a-zA-Z0-9 ]+$/);
            gib("mod-name-warning").classList.toggle("is-hidden", !errors.mod_name);
        });

        gib("mod-id-input").addEventListener("input", e => {
            errors.mod_id = !e.target.value.match(/^[a-zA-Z0-9_-]+$/);
            gib("mod-id-warning").classList.toggle("is-hidden", !errors.mod_id);
        });

        gib("version-search").addEventListener("keyup", e => {
            for (const option of document.querySelectorAll("#version-select option")) {
                option.classList.toggle("is-hidden", !option.value.startsWith(gib("version-search").value));
            }

            if (!gib("version-select").value.startsWith(gib("version-search").value)) {
                gib("version-select").value = document.querySelector("#version-select option:not(.is-hidden)").value;
                gib("version-select").dispatchEvent(new Event("change"));
            }
        });

        gib("button-generate").addEventListener("click", async () => {
            if (Object.values(errors).some(error => error)) {
                toast({
                    message: "Please fix the errors before generating",
                    type: "is-danger",
                    dismissible: true,
                    duration: 5000
                });

                return;
            }

            gib("button-generate").classList.add("is-loading");

            const version = gib("version-select").value;
            const components = latestVersionComponents[version];

            const modName = gib("mod-name-input").value;
            const modId = gib("mod-id-input").value;
            const modDescription = gib("mod-description-input").value;
            const modAuthor = gib("mod-author-input").value;

            const mavenGroup = (namespaceType === "domain" ? gib("input-domain").value : namespaceType === "github" ? gib("input-github").value.toLowerCase() + ".github.io" : gib("input-provide").value + ".quiltusers.dev").split(".").reverse().join(".");
            const modNamespace = modId.replace(/-/g, "_").toLowerCase();
            const src = `src/main/java/${mavenGroup.replace(/\./g, "/")}/${modNamespace}`;
            const modClass = modId.replace(/[-_]([a-zA-Z])/g, (_, c) => c.toUpperCase()).replace(/^[a-z]/, c => c.toUpperCase()).replace(/[-_]/g, "");

            const namespaceDomain = namespaceType === "domain" ? gib("input-domain").value : namespaceType === "github" ? gib("input-github").value : gib("input-provide").value + ".quiltusers.dev";

            const license = document.querySelector("input[name=license]:checked")?.nextElementSibling.textContent.split(" - ")[0];

            if (!modName || !modId || !namespaceDomain || !license) {
                toast({
                    message: "Please fill out all the required fields",
                    type: "is-danger",
                    dismissible: true,
                    duration: 5000
                });

                gib("button-generate").classList.remove("is-loading");
                return;
            }

            let origZip = new JSZip();
            const modZip = new JSZip();

            await fetch("/api/internal/download-template-mod")
                .then(res => res.blob())
                .then(blob => origZip.loadAsync(blob));

            origZip = origZip.folder(Object.keys(origZip.files)[0].split("/")[0]);

            // Files that don't need to be modified
            for (const file of COPY_AS_IS) {
                const content = await origZip.file(file).async("blob");
                modZip.file(file, content);
            }

            // README.md
            const readme = `# ${modName}`
            modZip.file("README.md", readme);

            // libs.versions.toml
            const topOfFile = `[versions]
# The latest versions are available at https://quiltmc.org/en/usage/latest-versions
minecraft = "${version}"
loom = "${components.loom}"

quilt_mappings = "${components.quilt_mappings}"
quilt_loader = "${components.quilt_loader}"

quilted_fabric_api = "${components.quilted_fabric_api}"`
            const bottomOfFile = (await origZip.file("gradle/libs.versions.toml").async("string")).replace(/\[versions\](.|\n)*?\[/, "");

            const libsVersionToml = topOfFile + "\n\n[" + bottomOfFile;
            modZip.file("gradle/libs.versions.toml", libsVersionToml);

            // LICENSE.md
            const licenseSPDX = {
                "MIT": "MIT",
                "Mozilla Public License 2.0": "MPL-2.0",
                "The Unlicense": "Unlicense",
                "Polyform Shield": "PolyForm-Shield-1.0.0",
                "None (All Rights Reserved)": null
            }[license];
            if (licenseSPDX) {
                const licenseContent = (await fetch(`/assets/license-templates/${licenseSPDX}`).then(res => res.text()))
                    .replace(/YEAR/g, new Date().getFullYear().toString())
                    .replace(/AUTHOR/g, modAuthor);
                modZip.file("LICENSE.md", licenseContent);
            }

            // gradle.properties
            const gradleProperties = (await origZip.file("gradle.properties").async("string"))
                .replace(/maven_group = .*/, `maven_group = ${mavenGroup}`)
                .replace(/archives_base_name = .*/, `archives_base_name = ${modNamespace}`);
            modZip.file("gradle.properties", gradleProperties);

            // build.gradle
            const buildGradle = (await origZip.file("build.gradle").async("string"))
                .replace(/example_mod/, modId)
                .replace(/'LICENSE'/, "'LICENSE.md'");
            modZip.file("build.gradle", buildGradle);

            // src/main/resources/quilt.mod.json
            const modJson = JSON.parse(await origZip.file("src/main/resources/quilt.mod.json").async("string"));

            const contributors = {};
            contributors[modAuthor] = "Owner";

            modJson.quilt_loader.id = modId;
            modJson.quilt_loader.metadata.name = modName;
            modJson.quilt_loader.metadata.description = modDescription;
            modJson.quilt_loader.metadata.contributors = contributors;
            modJson.quilt_loader.metadata.contact = {};
            modJson.quilt_loader.entrypoints.init = `${mavenGroup}.${modNamespace}.${modClass}`;
            modJson.mixin = `${modId}.mixins.json`;
            if (licenseSPDX) {
                modJson.quilt_loader.metadata.license = licenseSPDX;
            }
            modZip.file("src/main/resources/quilt.mod.json", JSON.stringify(modJson, null, 4));

            // src/main/resources/[].mixins.json
            const mixinsJson = JSON.parse(await origZip.file("src/main/resources/example_mod.mixins.json").async("string"));
            mixinsJson.package = `${mavenGroup}.${modNamespace}.mixin`;
            modZip.file(`src/main/resources/${modId}.mixins.json`, JSON.stringify(mixinsJson, null, 4));

            // src/main/resources/assets/[]/icon.png
            const icon = await origZip.file("src/main/resources/assets/example_mod/icon.png").async("blob");
            modZip.file(`src/main/resources/assets/${modId}/icon.png`, icon);

            // src/main/java/[]/[].java
            const modClassContent = `package ${mavenGroup}.${modNamespace};

import org.quiltmc.loader.api.ModContainer;
import org.quiltmc.qsl.base.api.entrypoint.ModInitializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ${modClass} implements ModInitializer {
    public static final Logger LOGGER = LoggerFactory.getLogger("${modName}");

    @Override
    public void onInitialize(ModContainer mod) {
        LOGGER.info("Hello Quilt world from {}! Stay fresh!", mod.metadata().name());
    }
}`
            modZip.file(`${src}/${modClass}.java`, modClassContent);

            // src/main/java/[]/mixin/TitleScreenMixin.java
            const titleScreenMixinContent = `package ${mavenGroup}.${modNamespace}.mixin;

import ${mavenGroup}.${modNamespace}.${modClass};
import net.minecraft.client.gui.screen.TitleScreen;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

@Mixin(TitleScreen.class)
public class TitleScreenMixin {
    @Inject(method = "init", at = @At("TAIL"))
    public void onInit(CallbackInfo ci) {
        ${modClass}.LOGGER.info("This line is printed by an example mod mixin!");
    }
}`
            modZip.file(`${src}/mixin/TitleScreenMixin.java`, titleScreenMixinContent);

            // Done
            FileSave.saveAs(await modZip.generateAsync({ type: "blob" }), `${modId}-template.zip`);
            gib("button-generate").classList.remove("is-loading");
        });
    }
</script>